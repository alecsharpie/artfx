[{
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n\nconst lineCount = 200;\nconst circleCount = 100;\n\n// Draw lines to represent the interconnectedness\nfor (let i = 0; i < lineCount; i++) {\n  const x1 = Math.random() * displayWidth;\n  const y1 = Math.random() * displayHeight;\n  const x2 = Math.random() * displayWidth;\n  const y2 = Math.random() * displayHeight;\n\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.strokeStyle = `hsl(${Math.random() * 360}, 50%, 50%)`;\n  ctx.lineWidth = Math.random() * 2;\n  ctx.stroke();\n}\n\n// Draw circles to represent the people\nfor (let i = 0; i < circleCount; i++) {\n  const x = Math.random() * displayWidth;\n  const y = Math.random() * displayHeight;\n  const radius = Math.random() * 10 + 2;\n\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, Math.PI * 2);\n  ctx.fillStyle = `hsl(${Math.random() * 360}, 50%, 50%)`;\n  ctx.fill();\n\n  // Add a subtle glow effect\n  ctx.shadowColor = ctx.fillStyle;\n  ctx.shadowBlur = radius * 1.5;\n  ctx.fill();\n  ctx.shadowBlur = 0;\n}",
        "quote": "One of the hardest lessons of young Sam's life had been finding out that the people in charge weren't in charge. It had been finding out that governments were not, on the whole, staffed by people who had a grip, and that plans were what people made instead of thinking. - Terry Pratchett",
        "date": "2023-04-28"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n\n// Generate lines and circles with varying transparency\nfor (let i = 0; i < 150; i++) {\n\n    // Set the positions and sizes randomly\n    const x1 = Math.random() * displayWidth;\n    const y1 = Math.random() * displayHeight;\n    const x2 = Math.random() * displayWidth;\n    const y2 = Math.random() * displayHeight;\n    const radius = Math.random() * 20;\n\n    // Set the color and transparency based on the positions and size\n    const hue = (x1 + y1) / (displayWidth + displayHeight) * 360;\n    const saturation = (x2 + y2) / (displayWidth + displayHeight) * 100;\n    const lightness = 50;\n    const alpha = radius / 50;\n\n    // Draw the line on the canvas\n    ctx.strokeStyle = `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n    ctx.lineWidth = radius / 10;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    // Draw the circle on the canvas\n    ctx.fillStyle = `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n    ctx.beginPath();\n    ctx.arc(x1, y1, radius, 0, Math.PI * 2);\n    ctx.fill();\n}",
        "quote": "It is the logic of our times,  No subject for immortal verse \u2014  That we who lived by honest dreams  Defend the bad against the worse. - Cecil Day Lewis",
        "date": "2023-04-27"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\r\nconst displayWidth = canvas.width;\r\nconst displayHeight = canvas.height;\r\n\r\n// Draw lines representing the path towards improvement\r\nfor (let i = 0; i < 100; i++) {\r\n    const x1 = Math.random() * displayWidth;\r\n    const y1 = Math.random() * displayHeight;\r\n    const x2 = x1 + Math.random() * 150 - 75;\r\n    const y2 = y1 - Math.random() * 100;\r\n\r\n    // Set the color of the line based on its position\r\n    const hue = 200 - y1 / displayHeight * 100;\r\n    const saturation = 100;\r\n    const lightness = 50;\r\n\r\n    ctx.strokeStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n    ctx.lineWidth = 2;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n}\r\n\r\n// Generate rectangles representing obstacles (wars and poverty)\r\nfor (let i = 0; i < 10; i++) {\r\n    const x = Math.random() * displayWidth;\r\n    const y = Math.random() * displayHeight;\r\n    const width = Math.random() * 100 + 20;\r\n    const height = Math.random() * 100 + 20;\r\n\r\n    // Set the color of the rectangle based on its size\r\n    const hue = 0;\r\n    const saturation = 100;\r\n    const lightness = Math.min(Math.max((width * height) / 2000 * 100, 30), 80);\r\n\r\n    ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n    ctx.fillRect(x, y, width, height);\r\n}",
        "quote": "We still have wars and we still have poverty \u2014 as long as these things exist, there's always going to be something to do. But that cannot distract from the fact that we're on the way. - Harry Belafonte",
        "date": "2023-04-26"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n\nconst numLines = 150;\nconst maxLineWidth = 15;\nconst minLineLength = 3;\n\n// Draw lines representing soldiers\nfor (let i = 0; i < numLines; i++) {\n  const x1 = Math.random() * displayWidth;\n  const y1 = Math.random() * displayHeight;\n  const lineLength = minLineLength + Math.random() * (displayHeight - minLineLength);\n  const angle = Math.random() * Math.PI;\n  const x2 = x1 + lineLength * Math.cos(angle);\n  const y2 = y1 + lineLength * Math.sin(angle);\n\n  const lineWidth = Math.random() * maxLineWidth;\n\n  const alpha = 0.3 + Math.random() * 0.7;\n\n  ctx.strokeStyle = `rgba(0, 0, 0, ${alpha})`;\n  ctx.lineWidth = lineWidth;\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n}\n\n// Draw a circular gradient representing a question\nconst gradientSize = Math.min(displayWidth, displayHeight) / 3;\nconst centerX = displayWidth / 2;\nconst centerY = displayHeight / 2;\n\nconst gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, gradientSize);\ngradient.addColorStop(0, \"rgba(255, 255, 255, 0.2)\");\ngradient.addColorStop(1, \"rgba(255, 255, 255, 0)\");\n\nctx.fillStyle = gradient;\nctx.beginPath();\nctx.arc(centerX, centerY, gradientSize, 0, Math.PI * 2);\nctx.fill();",
        "quote": "I don't believe that it can end. Now that I've seen what war is, what civil war is, I know that everybody, if one day it should end, ought to ask himself: \"And what shall we make of the fallen? Why are they dead?\" I wouldn't know what to say. Not now, at any rate. Nor does it seem to me that the others know. Perhaps only dead know, and only for them is the war really over. - Cesare Pavese",
        "date": "2023-04-25"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n\n// Generate a pattern of rectangles on the canvas\nfor (let i = 0; i < 150; i++) {\n\n    // Set the position and size of the rectangle randomly\n    const x = Math.random() * displayWidth;\n    const y = Math.random() * displayHeight;\n    const width = Math.random() * 80;\n    const height = Math.random() * 80;\n\n    // Set the color of the rectangle based on its position and size\n    const hue = y / displayHeight * 360;\n    const saturation = Math.max(0, displayWidth/4 - x) / (displayWidth/4) * 100;\n    const lightness = Math.max(0, displayHeight/2 - y) / (displayHeight/2) * 50;\n\n    // Draw the rectangle on the canvas\n    ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n    ctx.beginPath();\n    ctx.rect(x, y, width, height);\n    ctx.fill();\n}\n\n// Generate a pattern of lines on the canvas\nfor (let i = 0; i < 300; i++) {\n\n    // Set the position of the line start and end randomly\n    const x1 = Math.random() * displayWidth;\n    const y1 = Math.random() * displayHeight;\n    const x2 = Math.random() * displayWidth;\n    const y2 = Math.random() * displayHeight;\n\n    // Set the color of the line based on its position\n    const hue = (x1 + x2) / (2 * displayWidth) * 360;\n    const saturation = Math.max(0, ((y1 + y2) / (2 * displayHeight)) - 0.5) * 100;\n    const lightness = Math.max(0, (1 - ((y1 + y2) / (2 * displayHeight))) * 50);\n\n    // Draw the line on the canvas\n    ctx.strokeStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}",
        "quote": "Historical sense and poetic sense should not, in the end, be contradictory, for if poetry is the little myth we make, history is the big myth we live, and in our living, constantly remake. - Robert Penn Warren",
        "date": "2023-04-24"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nvar displayWidth = canvas.width;\nvar displayHeight = canvas.height;\nvar gridSize = 20;\nvar lineHeight = 1;\nvar colors = [\"#dc143c\", \"#00FFFF\", \"#ff69b4\", \"#00FF00\", \"#7fff00\", \"#ff7f50\", \"#8B008B\", \"#808000\", \"#1e90ff\", \"#f4a460\", \"#9400d3\", \"#FF00FF\"]\nvar {textX, textY} = placeText(displayWidth, displayHeight);\n\n// Draw lines of changing colors and thickness with vertical repetitions\nfor (let i = 0; i < displayHeight; i += lineHeight) {\n    let lineColor = colors[Math.floor(Math.random() * colors.length)]\n    let lineThickness = Math.random() * 10;\n    ctx.beginPath();\n    ctx.moveTo(0, i);\n    for (let j = 0; j < displayWidth; j += gridSize) {\n        lineColor = colors[Math.floor(Math.random() * colors.length)]\n        lineThickness = Math.random() * 10;\n        ctx.strokeStyle = lineColor;\n        ctx.lineWidth = lineThickness;\n        ctx.lineTo(j, i);\n        ctx.stroke();\n    }\n    ctx.closePath();\n}\n\n// Place the text in the middle of the canvas\nfunction placeText(displayWidth, displayHeight) {\n    const fontSize = Math.floor(Math.min(displayWidth, displayHeight) / 10);\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.textAlign = \"center\";\n    ctx.font = `bold ${fontSize}px monospace`;\n    const text = \"O, wonder! How many goodly creatures are there here! How beauteous mankind is! O brave new world, That has such people in't!\";\n    const textWidth = ctx.measureText(text).width;\n    const textX = displayWidth / 2;\n    const textY = (displayHeight / 2) - (fontSize * 2);\n    ctx.fillText(text, textX, textY);\n    return {textX, textY};\n}\n\n// Draw circles around the text with horizontal repetitions\nconst textHeight = Math.floor(displayHeight / 2);\nconst textWidth = Math.floor(ctx.measureText(\"O,\").width);\nctx.lineWidth = 2;\nctx.strokeStyle = \"#FFFFFF\";\nlet circleX = textX;\nlet circleY = textY + textHeight / 2;\nlet radius = 0;\nlet numCircles = Math.floor(textWidth / gridSize);\nlet circleWidth = textWidth / numCircles;\nfor (let i = 0; i < numCircles; i++) {\n    ctx.beginPath();\n    radius = Math.random() * 20;\n    ctx.arc(circleX, circleY, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n    circleX += circleWidth;\n    if(circleX > displayWidth) {\n        circleX = textX;\n        circleY += 5;\n    }\n}",
        "quote": "O, wonder! How many goodly creatures are there here! How beauteous mankind is! O brave new world,That has such people in't! - William Shakespeare",
        "date": "2023-04-23"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nvar displayWidth = canvas.width;\nvar displayHeight = canvas.height;\n\n// Create a gradient with light blue and orange colors\nconst gradient = ctx.createLinearGradient(0, 0, displayWidth, displayHeight);\ngradient.addColorStop(0, \"#90EE90\");\ngradient.addColorStop(1, \"#FFA07A\");\n\n// Set the canvas background to the gradient\nctx.fillStyle = gradient;\nctx.fillRect(0, 0, displayWidth, displayHeight);\n\n// Generate random circles with varying colors, sizes, and positions\nfor (let i = 0; i < 10; i++) {\n   \n// Set the color of the circle randomly\n    const red = Math.floor(Math.random() * 256);\n    const green = Math.floor(Math.random() * 256);\n    const blue = Math.floor(Math.random() * 256);\n    const alpha = Math.random();\n    ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n\n   \n// Set the position and size of the circle randomly\n    const x = Math.random() * displayWidth;\n    const y = Math.random() * displayHeight;\n    const radius = Math.random() * 50 + 50;\n\n   \n// Draw the circle on the canvas\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fill();\n}\n\n// Generate random lines with varying colors, sizes, and positions\nfor (let i = 0; i < 5; i++) {\n   \n// Set the color of the line randomly\n    const red = Math.floor(Math.random() * 256);\n    const green = Math.floor(Math.random() * 256);\n    const blue = Math.floor(Math.random() * 256);\n    const alpha = Math.random();\n    ctx.strokeStyle = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n\n   \n// Set the position and size of the line randomly\n    const x1 = Math.random() * displayWidth;\n    const y1 = Math.random() * displayHeight;\n    const x2 = Math.random() * displayWidth;\n    const y2 = Math.random() * displayHeight;\n    const lineWidth = Math.random() * 5 + 3;\n\n   \n// Draw the line on the canvas\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n}",
        "quote": "The soul is silent.  If it speaks at all  it speaks in dreams. - Louise Gl\u00fcck",
        "date": "2023-04-22"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nvar displayWidth = canvas.width;\nvar displayHeight = canvas.height;\n\n// Set the background color\nctx.fillStyle = \"#000\";\nctx.fillRect(0, 0, displayWidth, displayHeight);\n\n// Generate a pattern of circles on the canvas\nfor (let i = 0; i < 50; i++) {\n \n// Set the color of the circle randomly\n  const red = Math.floor(Math.random() * 256);\n  const green = Math.floor(Math.random() * 256);\n  const blue = Math.floor(Math.random() * 256);\n  const alpha = Math.random() * 0.5 + 0.5;\n  ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n\n \n// Set the position and size of the circle randomly\n  const x = Math.random() * displayWidth;\n  const y = Math.random() * displayHeight;\n  const radius = Math.random() * 200;\n\n \n// Draw the circle on the canvas\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, Math.PI * 2);\n  ctx.fill();\n}\n\n// Generate a pattern of lines on the canvas\nctx.strokeStyle = \"#fff\";\nfor (let i = 0; i < 50; i++) {\n \n// Set the position and angle of the line randomly\n  const x1 = Math.random() * displayWidth;\n  const y1 = Math.random() * displayHeight;\n  const angle = Math.random() * Math.PI * 2;\n  const length = Math.random() * 500;\n\n  const x2 = x1 + length * Math.cos(angle);\n  const y2 = y1 + length * Math.sin(angle);\n\n \n// Draw the line on the canvas\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n}\n\n// Generate a pattern of triangles on the canvas\nfor (let i = 0; i < 50; i++) {\n \n// Set the color of the triangle randomly\n  const red = Math.floor(Math.random() * 256);\n  const green = Math.floor(Math.random() * 256);\n  const blue = Math.floor(Math.random() * 256);\n  const alpha = Math.random() * 0.5 + 0.5;\n  ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n\n \n// Set the position and size of the triangle randomly\n  const x1 = Math.random() * displayWidth;\n  const y1 = Math.random() * displayHeight;\n  const size = Math.random() * 200;\n\n  const x2 = x1 + size * Math.cos(Math.PI * 2 / 3);\n  const y2 = y1 + size * Math.sin(Math.PI * 2 / 3);\n\n  const x3 = x1 + size * Math.cos(2 * Math.PI * 2 / 3);\n  const y3 = y1 + size * Math.sin(2 * Math.PI * 2 / 3);\n\n \n// Draw the triangle on the canvas\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x3, y3);\n  ctx.fill();\n}",
        "quote": "Imagination is the outreaching of mind ... the bombardment of the conscious mind with ideas, impulses, images and every sort of psychic phenomena welling up from the preconscious. It is the capacity to \"dream dreams and see visions ... - Rollo May",
        "date": "2023-04-21"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nvar displayWidth = canvas.width;\nvar displayHeight = canvas.height;\n\nctx.fillStyle = '#111';\nctx.fillRect(0, 0, displayWidth, displayHeight);\n\nfor (let i = 0; i < 100; i++) {\n    const x = Math.random() * displayWidth;\n    const y = Math.random() * displayHeight;\n    const size = Math.random() * 150;\n\n    const gradient = ctx.createRadialGradient(x, y, 0, x, y, size);\n    gradient.addColorStop(0, \"rgba(255, 255, 255, 0.8)\");\n    gradient.addColorStop(1, \"transparent\");\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(x, y, size, 0, Math.PI * 2);\n    ctx.fill();\n}\n\nctx.fillStyle = '#000';\nconst fontSize = displayWidth/20;\nctx.font = `${fontSize}px Arial`;\n\nconst text = \"I'm always dreaming, even when I'm awake it is never finished.\";\nconst textWidth = ctx.measureText(text).width;\nconst textHeight = fontSize * 1.2 * 3;\n\n// center the text\nconst textX = (displayWidth - textWidth) / 2;\nconst textY = (displayHeight - textHeight) / 2 + fontSize * 1.2;\n\n// draw the text\nctx.fillText(text, textX, textY);",
        "quote": "I'm always dreaming, even when I'm awake; it is never finished. - Peter S. Beagle",
        "date": "2023-04-20"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nconst width = canvas.width;\nconst height = canvas.height;\n\n// Colors to use\nconst colors = [\"#333333\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"];\n\n// Text to use\nconst text = \" I paint my pictures with all the considerations which are natural to my intelligence, and according as my intelligence understands them.\";\n\n// Get the total number of characters in the text\nconst textLength = text.length;\n\n// Set the font size and family\nctx.font = \"50px Verdana\";\n\n// Loop through every character and paint it on the canvas\nfor (let i = 0; i < textLength; i++) {\n \n// Get a random color\n  const color = colors[Math.floor(Math.random() * colors.length)];\n\n \n// Set the color for the fill and stroke\n  ctx.fillStyle = color;\n  ctx.strokeStyle = color;\n\n \n// Get the current character\n  const character = text.charAt(i);\n\n \n// Get the x and y positions to draw the character\n  const x = Math.random() * width;\n  const y = Math.random() * height;\n\n \n// Draw the character on the canvas\n  ctx.fillText(character, x, y);\n  ctx.strokeText(character, x, y);\n}",
        "quote": "I paint my pictures with all the considerations which are natural to my intelligence, and according as my intelligence understands them. - Paolo Veronese",
        "date": "2023-04-19"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\n    var displayWidth = canvas.width;\n    var displayHeight = canvas.height;\n\n   \n// Set the background color to black\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, displayWidth, displayHeight);\n\n   \n// Generate lines and shapes on the canvas\n    for (let i = 0; i < 100; i++) {\n       \n// Set the color of the lines randomly\n        const red = Math.floor(Math.random() * 256);\n        const green = Math.floor(Math.random() * 256);\n        const blue = Math.floor(Math.random() * 256);\n        ctx.strokeStyle = `rgb(${red}, ${green}, ${blue})`;\n\n       \n// Set the position and size of the shapes randomly\n        const x1 = Math.random() * displayWidth;\n        const y1 = Math.random() * displayHeight;\n        const x2 = Math.random() * displayWidth;\n        const y2 = Math.random() * displayHeight;\n        const radius = Math.random() * 100;\n        const startAngle = Math.random() * Math.PI * 2;\n        const endAngle = Math.random() * Math.PI * 2;\n\n       \n// Choose between drawing a line or a circle\n        if (i % 2 === 0) {\n           \n// Draw a line on the canvas\n            ctx.lineWidth = 5;\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n        } else {\n           \n// Draw a circle on the canvas\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            ctx.arc(x1, y1, radius, startAngle, endAngle);\n            ctx.stroke();\n        }\n    }",
        "quote": "The great desire of this age is for a Doctrine which may serve to condense our knowledge, guide our researches, and shape our lives, so that Conduct may really be the consequence of Belief. - George Henry Lewes",
        "date": "2023-04-18"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nvar displayWidth = canvas.width;\nvar displayHeight = canvas.height;\n\n// Set up variables for the quote and its styling\nconst quote = \"On the stage it is always now; the personages are standing on that razor edge, between the past and the future, which is the essential character of conscious being; the words are rising to their lips in immediate spontaneity ... The theater is supremely fitted to say: 'Behold! These things are.'\";\nctx.font = \"italic bold 50px Arial\";\nctx.textAlign = \"center\";\nctx.fillStyle = \"#FFFFFF\";\n\n// Draw the quote on the canvas\nconst x = displayWidth / 2;\nconst y = displayHeight / 2;\nctx.fillText(quote, x, y); \n\n// Generate a pattern of lines on the canvas\nfor (let i = 0; i < 1000; i++) {\n \n// Set the position and length of the line randomly\n  const x1 = Math.random() * displayWidth;\n  const y1 = Math.random() * displayHeight;\n  const x2 = Math.random() * displayWidth;\n  const y2 = Math.random() * displayHeight;\n\n \n// Set the color of the line based on the quote text\n  const textData = ctx.getImageData(x, y, 1, 1).data;\n  const red = textData[0];\n  const green = textData[1];\n  const blue = textData[2];\n  ctx.strokeStyle = `rgb(${red}, ${green}, ${blue})`;\n\n \n// Draw the line on the canvas\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n}",
        "quote": "On the stage it is always now; the personages are standing on that razor edge, between the past and the future, which is the essential character of conscious being; the words are rising to their lips in immediate spontaneity ... The theater is supremely fitted to say: \"Behold! These things are.\" - Thornton Wilder",
        "date": "2023-04-17"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\nconst colors = [ \"#ff6f00\", \"#90caf9\", \"#ffea00\", \"#00838f\", \"#9c27b0\" ];\n// Function to draw a line between two points\nfunction drawLine(x1, y1, x2, y2, color) {\n  ctx.strokeStyle = color;\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n}\n// Function to draw rectangles\nfunction drawRect(x, y, width, height, color) {\n  ctx.fillStyle = color;\n  ctx.fillRect(x, y, width, height);\n}\n// Draw rectangles and lines on the canvas\nfor (let i = 0; i < 100; i++) {\n  const x = Math.random() * displayWidth;\n  const y = Math.random() * displayHeight;\n  const width = Math.random() * 50;\n  const height = Math.random() * 50;\n  const color = colors[Math.floor(Math.random() * colors.length) ];\n  drawRect(x, y, width, height, color);\n  const x1 = Math.random() * displayWidth;\n  const y1 = Math.random() * displayHeight;\n  const x2 = Math.random() * displayWidth;\n  const y2 = Math.random() * displayHeight;\n  drawLine(x1, y1, x2, y2, color);\n}\n",
        "quote": "Man is so made that he can only find relaxation from one kind of labor by taking up another. - Anatole France",
        "date": "2023-04-16"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\n const displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n// Draw the background gradient \nconst gradient = ctx.createLinearGradient(0, 0, 0, displayHeight);\ngradient.addColorStop(0, \"rgba(255, 255, 255, 1)\");\ngradient.addColorStop(1, \"rgba(100, 100, 255, 1)\");\nctx.fillStyle = gradient;\nctx.fillRect(0, 0, displayWidth, displayHeight);\n// Draw young branches \nconst branchCount = 70;\nconst branchLength = 20;\nfunction drawYoungBranch(x, y, angle) { const offsetX1 = Math.cos(angle) * branchLength;\nconst offsetY1 = Math.sin(angle) * branchLength;\nctx.beginPath();\nctx.strokeStyle = 'rgba(0, 128, 0, 0.7)';\nctx.lineWidth = 3;\nctx.moveTo(x, y);\nctx.lineTo(x + offsetX1, y + offsetY1);\nctx.stroke();\nif (branchLength > 10) { drawYoungBranch(x + offsetX1, y + offsetY1, angle + Math.PI * 0.25 * Math.random());\ndrawYoungBranch(x + offsetX1, y + offsetY1, angle - Math.PI * 0.25 * Math.random()); } } for (let i = 0; i < branchCount; i++) { const x = Math.random() * displayWidth;\nconst y = Math.random() * displayHeight * 0.66;\nconst angle = -Math.PI / 2 + (Math.PI / 12 * (Math.random() * 2 - 1));\ndrawYoungBranch(x, y, angle); }\n// Draw elder branches \nconst elderBranchCount = 30;\nconst elderBranchFactor = 0.9;\nfunction drawElderBranch(x, y, length, angle) { const offsetX = Math.cos(angle) * length;\nconst offsetY = Math.sin(angle) * length;\nctx.beginPath();\nctx.strokeStyle = 'rgba(139, 69, 19, 0.9)';\nctx.lineWidth = 6;\nctx.moveTo(x, y);\nctx.lineTo(x + offsetX, y + offsetY);\nctx.stroke();\nif (length > 10) { const newLength = length * elderBranchFactor;\ndrawElderBranch(x + offsetX, y + offsetY, newLength, angle + Math.PI * 0.2 * Math.random());\ndrawElderBranch(x + offsetX, y + offsetY, newLength, angle - Math.PI * 0.2 * Math.random()); } } for (let i = 0; i < elderBranchCount; i++) { const x = Math.random() * displayWidth;\nconst y = Math.random() * displayHeight * 0.7;\nconst length = (Math.random() * 20) + 40;\nconst angle = -Math.PI / 2 + (Math.PI / 6 * (Math.random() * 2 - 1));\ndrawElderBranch(x, y, length, angle); }",
        "quote": "Learning acquired in youth arrests the evil of old age; and if you understand that old age has wisdom for its food, you will so conduct yourself in youth that your old age will not lack for nourishment. - Leonardo da Vinci",
        "date": "2023-04-15"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n// Generate a pattern of lines and circles \nfor (let i = 0; i < 100; i++) {\n// Set the position and size of the shape randomly \nconst x1 = Math.random() * displayWidth;\nconst y1 = Math.random() * displayHeight;\nconst x2 = Math.random() * displayWidth;\nconst y2 = Math.random() * displayHeight;\n// Set the color of the shape based on its position \nconst hue = (x1 + y1) / (displayWidth + displayHeight) * 360;\nconst saturation = 70;\nconst lightness = 50;\n// Draw a line connecting two random points \nctx.strokeStyle = `hsl(${hue }, ${saturation }%, ${lightness }%)`;\nctx.beginPath();\nctx.moveTo(x1, y1);\nctx.lineTo(x2, y2);\nctx.stroke();\n// Draw a circle at each point \nconst radius = Math.random() * 15;\nctx.fillStyle = `hsl(${hue }, ${saturation }%, ${lightness }%)`;\nctx.beginPath();\nctx.arc(x1, y1, radius, 0, Math.PI * 2);\nctx.fill();\nctx.beginPath();\nctx.arc(x2, y2, radius, 0, Math.PI * 2);\nctx.fill(); } ",
        "quote": "The desire to write perfectly of beautiful happenings is, as the saying runs, old as the hills - and as immortal. - James Branch Cabell",
        "date": "2023-04-14"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n// Generate lines on the canvas representing the progression of wisdom \nfor (let i = 0; i < 100; i++) {\n// Set the start and end points of the line randomly \nconst x1 = Math.random() * displayWidth;\nconst y1 = Math.random() * displayHeight;\nconst x2 = Math.random() * displayWidth;\nconst y2 = Math.random() * displayHeight;\n// Set the width and color of the line based on its position \nconst lineWidth = Math.random() * 5;\nconst hue = (x1 / displayWidth + y1 / displayHeight) / 2 * 360;\nconst saturation = Math.abs(x2 - x1) / displayWidth * 100;\nconst lightness = Math.abs(y2 - y1) / displayHeight * 50;\n// Draw the line on the canvas \nctx.strokeStyle = `hsl(${hue }, ${saturation }%, ${lightness }%)`;\nctx.lineWidth = lineWidth;\nctx.beginPath();\nctx.moveTo(x1, y1);\nctx.lineTo(x2, y2);\nctx.stroke(); }",
        "quote": "Honesty is the first chapter in the book of wisdom. - Thomas Jefferson",
        "date": "2023-04-13"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\nconst numberOfElements = 50;\nfor (let x = 0; x < numberOfElements; x++) { for (let y = 0; y < numberOfElements; y++) { const randomSize = 5 + Math.random() * 20;\nconst xOffset = displayWidth / numberOfElements;\nconst yOffset = displayHeight / numberOfElements;\nconst posX = xOffset * x + randomSize / 2;\nconst posY = yOffset * y + randomSize/ 2;\nconst centerX = displayWidth / 2;\nconst centerY = displayHeight / 2;\nconst angle = Math.atan2(posY - centerY, posX - centerX);\nconst distX = Math.cos(angle) * randomSize;\nconst distY = Math.sin(angle) * randomSize;\nconst newX = posX + distX;\nconst newY = posY + distY;\nconst hue = 360 * (x / numberOfElements + y / numberOfElements);\nconst saturation = 60;\nconst lightness = 50;\nctx.fillStyle = `hsl(${hue }, ${saturation }%, ${lightness }%)`;\nctx.beginPath();\nctx.arc(newX, newY, randomSize / 2, 0, Math.PI * 2);\nctx.fill();\nctx.lineWidth = 1;\nctx.strokeStyle = `hsl(${hue }, ${saturation }%, ${lightness + 10 }%)`;\nctx.beginPath();\nctx.moveTo(posX, posY);\nctx.lineTo(newX, newY);\nctx.stroke(); } }",
        "quote": "The one Reality takes manifold names and forms as a result of human ignorance. It is one and the same Thing that a Bhakta calls God, a Jnani calls Brahman, a Shakta calls Shakti, an Atheist calls Nature, a Scientist calls Force or Energy, a Christian calls Father in Heaven, a Mussulman calls Allah, some others call Infinity or Truth and a Vedantin calls Atman or Self. Whatever different names there may be, the fact remains that the Thing is one and the same. The difference is only in names. The Absolute Thing, which is beyond name and form, is birthless, growthless, decayless, deathless, sexless, All-pervading, All-knowing, All-blissful, without beginning, without end, changeless, beyond time, space and causation. The One Thing or the Ocean of Consciousness by Itself is ever the same - One only without a second. - Swami Narayanananda",
        "date": "2023-04-12"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nvar displayWidth = canvas.width;\nvar displayHeight = canvas.height;\n\n// Set the text\nctx.font = \"bold 80px Arial\";\nctx.fillStyle = \"#FFFFFF\";\nctx.textAlign = \"center\";\nctx.fillText(\"PEACE\", displayWidth / 2, displayHeight / 2);\n\n// Draw the peace symbol\nctx.beginPath();\nctx.fillStyle = \"#FFFFFF\";\nctx.arc(displayWidth / 2, displayHeight / 2, displayHeight / 4, 0, Math.PI * 2);\nctx.fill();\nctx.beginPath();\nctx.fillStyle = \"#0072C6\";\nctx.arc(displayWidth / 2, displayHeight / 2, displayHeight / 4 + 10, 0, Math.PI * 2);\nctx.fill();\nctx.beginPath();\nctx.fillStyle = \"#FFFFFF\";\nctx.arc(displayWidth / 2, displayHeight / 2, displayHeight / 8, 0, Math.PI * 2);\nctx.fill();",
        "quote": "There is no path to peace except as the will of peoples may open to it. The way of peace is through agreement, not through force. - Charles Evans Hughes",
        "date": "2023-04-11"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nvar displayWidth = canvas.width;\nvar displayHeight = canvas.height;\n\n// Set the colors to use for the lines and background\nconst bgColor = \"#3f3f3f\";\nconst lineColor = \"#fafafa\";\n\n// Set the line parameters\nctx.lineWidth = 1;\nctx.lineCap = \"round\";\nctx.lineJoin = \"round\";\n\n// Set the font parameters\nconst fontFamily = \"Arial\";\nconst fontSize = \"50\";\nctx.font = `${fontSize}px ${fontFamily}`;\n\n// Set the text and its position\nconst text = \"Those who aim at faultless regularity will only produce mediocrity, and no one ever approaches perfection except by stealth, and unknown to themselves.\";\nconst textX = 100;\nconst textY = 200;\n\n// Set the maximum randomness of the lines\nconst maxRandomness = 30;\n\n// Draw the background\nctx.fillStyle = bgColor;\nctx.fillRect(0, 0, displayWidth, displayHeight);\n\n// Draw the lines\nctx.beginPath();\nctx.strokeStyle = lineColor;\nctx.moveTo(textX, textY);\n\nfor(let i = 0; i < text.length; i++) {\n   \n// Get the distance to move in the x direction\n    const dx = Math.random() * maxRandomness;\n    \n   \n// Determine if the line should go up or down\n    let dy;\n    if(Math.random() < 0.5) {\n        dy = -1 * Math.random() * maxRandomness;\n    } else {\n        dy = Math.random() * maxRandomness;\n    }\n    \n   \n// Draw the line\n    ctx.lineTo(textX + (i * 30) + dx, textY + dy);\n}\n\nctx.stroke();\n\n// Draw the text\nctx.fillStyle = lineColor;\nctx.fillText(text, textX, textY);",
        "quote": "Those who aim at faultless regularity will only produce mediocrity, and no one ever approaches perfection except by stealth, and unknown to themselves. - William Hazlitt",
        "date": "2023-04-10"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n// Create an array to store sun, earth, and angels \nconst objects = [];\n// Generate sun, earth, and angels with random positions and sizes \nfor (let i = 0; i < 50; i++) { const x = Math.random() * displayWidth;\nconst y = Math.random() * displayHeight;\nconst size = Math.random() * 20;\nif (i < 10) {\n// Sun \nobjects.push({ x, y, size, type: \"circle\", color: \"yellow\" }); } else if (i < 20) {\n// Earth \nobjects.push({ x, y, size, type: \"circle\", color: \"green\" }); } else {\n// Angels \nobjects.push({ x, y, size, type: \"triangle\", color: \"white\" }); } }\n// Function to draw a triangle \nfunction drawTriangle(ctx, x, y, size, color) { ctx.fillStyle = color;\nctx.beginPath();\nctx.moveTo(x, y);\nctx.lineTo(x + size / 2, y + size);\nctx.lineTo(x - size / 2, y + size);\nctx.closePath();\nctx.fill(); }\n// Draw objects on the canvas \nobjects.forEach((obj) => { if (obj.type === \"circle\") { ctx.fillStyle = obj.color;\nctx.beginPath();\nctx.arc(obj.x, obj.y, obj.size, 0, Math.PI * 2);\nctx.fill(); } else if (obj.type === \"triangle\") { drawTriangle(ctx, obj.x, obj.y, obj.size, obj.color); } });\n// Draw lines connecting objects to create a network \nctx.strokeStyle = \"lightblue\";\nctx.lineWidth = 1;\nfor (let i = 0; i < objects.length; i++) { for (let j = i + 1; j < objects.length; j++) { ctx.beginPath();\nctx.moveTo(objects[i].x, objects[i].y);\nctx.lineTo(objects[j].x, objects[j].y);\nctx.stroke(); } } ",
        "quote": "\"Christ the Lord is risen to-day,\"  Sons of men and angels say.  Raise your joys and triumphs high;  Sing, ye heavens, and earth reply!  Love's redeeming work is done,  Fought the fight, the battle won,  Lo! the Sun's eclipse is o'er,  Lo! He sets in blood no more. - Charles Wesley",
        "date": "2023-04-09"
    },
    {
        "code": "const ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n// Draw the cardboard sea \nctx.fillStyle = \"saddlebrown\";\nctx.fillRect(0, displayHeight * 0.7, displayWidth, displayHeight * 0.3);\n// Draw the paper moon \nconst moonX = Math.random() * displayWidth;\nconst moonY = Math.random() * displayHeight * 0.5;\nconst moonRadius = Math.random() * 50 + 50;\nctx.fillStyle = \"white\";\nctx.beginPath();\nctx.arc(moonX, moonY, moonRadius, 0, Math.PI * 2);\nctx.fill();\n// Draw the stars scattered in the sky \nfor (let i = 0; i < 100; i++) { const starX = Math.random() * displayWidth;\nconst starY = Math.random() * displayHeight * 0.65;\nconst starRadius = Math.random() * 2;\nctx.fillStyle = \"white\";\nctx.beginPath();\nctx.arc(starX, starY, starRadius, 0, Math.PI * 2);\nctx.fill(); }\n// Draw a boat sailing on the cardboard sea \nconst boatX = Math.random() * displayWidth;\nconst boatY = displayHeight * 0.7 - 20;\nctx.fillStyle = \"darkblue\";\nctx.beginPath();\nctx.moveTo(boatX, boatY);\nctx.lineTo(boatX + 40, boatY);\nctx.lineTo(boatX + 30, boatY + 20);\nctx.lineTo(boatX + 10, boatY + 20);\nctx.closePath();\nctx.fill();\n// Draw the boat's sail \nctx.fillStyle = \"white\";\nctx.beginPath();\nctx.moveTo(boatX + 20, boatY - 30);\nctx.lineTo(boatX + 10, boatY);\nctx.lineTo(boatX + 30, boatY);\nctx.closePath();\nctx.fill();",
        "quote": "Say, its only a paper moon  Sailing over a cardboard sea  But it wouldn't be make-believe  If you believed in me. - Yip Harburg",
        "date": "2023-04-08"
    },
    {
        "code": "// Get the canvas element context, width, and height\nconst ctx = canvas.getContext(\"2d\");\nconst displayWidth = canvas.width;\nconst displayHeight = canvas.height;\n\n// Generate a pattern of circles on the canvas\nfor (let i = 0; i < 200; i++) {\n\n   \n// Set the position and size of the circle randomly\n    const x = Math.random() * displayWidth;\n    const y = Math.random() * displayHeight;\n    const radius = Math.random() * 50;\n\n   \n// Set the color of the circle based on its position and size\n    const hue = x / displayWidth * 360;\n    const saturation = Math.max(0, (radius / 50) - (y / displayHeight)) * 100;\n    const lightness = Math.max(0, (1 - (y / displayHeight)) * 50);\n\n   \n// Draw the circle on the canvas\n    ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fill();\n}\n\n// Add a small message at the bottom\nctx.fillStyle = \"white\";\nctx.font = \"20px Arial\";\nctx.textAlign = \"center\";\nctx.fillText(\"We are all part of some cosmic pattern,\", displayWidth/2, displayHeight-40);\nctx.fillText(\"and this pattern works toward good and not evil.\", displayWidth/2, displayHeight-10);",
        "quote": "We are all part of some cosmic pattern, and this pattern works toward good and not evil. - Henry Kuttner",
        "date": "2023-04-07"
    }
]
